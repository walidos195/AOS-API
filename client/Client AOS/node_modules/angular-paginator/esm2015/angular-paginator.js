/**
 * MIT License
 * 
 * Copyright (c) 2017-2018 Sibiraj
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import { Injectable, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Pipe, Directive, ChangeDetectorRef, NgModule } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { CommonModule } from '@angular/common';

class AngularPaginatorService {
    constructor() {
        this.id = 'ANGULAR_PAGINATOR_DEFAULT';
        this.instances = {};
        this.change = new EventEmitter();
    }
    registerInstance(instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            const                  changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
        return;
    }
    updateInstance(instance) {
        for (const                  key in instance) {
            if (instance[key] !== this.instances[instance['id']][key]) {
                this.instances[instance['id']][key] = instance[key];
                return true;
            }
        }
        return false;
    }
    getInstance(id) {
        return this.instances[id];
    }
    getCurrentPage(id) {
        return this.instances[id].currentPage;
    }
}
AngularPaginatorService.decorators = [
    { type: Injectable },
];
AngularPaginatorService.ctorParameters = () => [];

class AngularPaginatorComponent {
    constructor(_angularPaginatorService) {
        this._angularPaginatorService = _angularPaginatorService;
        this.boundaryLinks = false;
        this.directionLinks = true;
        this.maxSize = 5;
        this.rotate = true;
        this.boundaryLinkNumbers = false;
        this.forceEllipses = false;
        this.firstText = 'First';
        this.previousText = 'Previous';
        this.nextText = 'Next';
        this.lastText = 'Last';
        this.screenReaderFirstText = 'First';
        this.screenReaderPreviousText = 'Previous';
        this.screenReaderNextText = 'Next';
        this.screenReaderLastText = 'Last';
        this.screenReaderPageText = 'Page';
        this.screenReaderCurrentPageText = 'You`re on page';
        this.screenReaderPaginationLabel = 'Pagination';
        this.autoHide = false;
        this.disabled = false;
        this.pageChange = new EventEmitter();
    }
    ngOnInit() {
        this.id = this.id ? this.id : this._angularPaginatorService.id;
        this.className = this.className ? this.className : this._angularPaginatorService.id;
    }
}
AngularPaginatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-angular-paginator',
                template: `<appAngularPaginator [id]="id" [boundaryLinks]="boundaryLinks" [directionLinks]="directionLinks" [maxSize]="maxSize" [rotate]="rotate"
  [boundaryLinkNumbers]="boundaryLinkNumbers" [forceEllipses]="forceEllipses" #paginator="angularPaginator" (pageChange)="pageChange.emit($event)">

  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->
  <ng-container *ngIf="!(autoHide && paginator.pages['length'] <= 1)">
    <nav class="angular-bs4-pagination" [attr.aria-label]="screenReaderPaginationLabel">

      <ng-container *ngIf="paginator.pages['length'] !== 0">
        <ul class="pagination" [ngClass]="className">

          <!-- boundary link -->
          <li class="page-item" *ngIf="boundaryLinks" (click)="paginator.toFirstPage()" [ngClass]="{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}">
            <a class="page-link" href="javascript:void(0)">
              <span aria-hidden="true" [innerHTML]="firstText"></span>
              <span class="sr-only">{{ screenReaderFirstText }}</span>
            </a>
          </li>

          <!-- direction link -->
          <li class="page-item" *ngIf="directionLinks" (click)="paginator.toPreviousPage()" [ngClass]="{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}">
            <a class="page-link" href="javascript:void(0)">
              <span aria-hidden="true" [innerHTML]="previousText"></span>
              <span class="sr-only">{{ screenReaderPreviousText }}</span>
            </a>
          </li>

          <!-- pagination array -->
          <li class="page-item" *ngFor="let page of paginator.pages" [ngClass]="{'active': page['active'], 'disabled': disabled}" (click)="!page['active'] && paginator.setCurrentPage(page['number'])">
            <a href="javascript:void(0)" class="page-link">
              {{ page['text'] }}
              <span class="sr-only" *ngIf="!page['active']">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>
              <span class="sr-only" *ngIf="page['active']">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>
            </a>
          </li>

          <!-- direction link -->
          <li class="page-item" *ngIf="directionLinks" (click)="paginator.toNextPage()" [ngClass]="{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}">
            <a class="page-link" href="javascript:void(0)">
              <span aria-hidden="true" [innerHTML]="nextText"></span>
              <span class="sr-only">{{ screenReaderNextText }}</span>
            </a>
          </li>

          <!-- boundary link -->
          <li class="page-item" *ngIf="boundaryLinks" (click)="paginator.toLastPage()" [ngClass]="{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}">
            <a class="page-link" href="javascript:void(0)">
              <span aria-hidden="true" [innerHTML]="lastText"></span>
              <span class="sr-only">{{ screenReaderLastText }}</span>
            </a>
          </li>

        </ul>
      </ng-container>

    </nav>
  </ng-container>

</appAngularPaginator>
`,
                styles: [`.angular-bs4-pagination .disabled{pointer-events:none}`],
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
AngularPaginatorComponent.ctorParameters = () => [
    { type: AngularPaginatorService, },
];
AngularPaginatorComponent.propDecorators = {
    "boundaryLinks": [{ type: Input },],
    "directionLinks": [{ type: Input },],
    "maxSize": [{ type: Input },],
    "rotate": [{ type: Input },],
    "boundaryLinkNumbers": [{ type: Input },],
    "forceEllipses": [{ type: Input },],
    "id": [{ type: Input },],
    "firstText": [{ type: Input },],
    "previousText": [{ type: Input },],
    "nextText": [{ type: Input },],
    "lastText": [{ type: Input },],
    "screenReaderFirstText": [{ type: Input },],
    "screenReaderPreviousText": [{ type: Input },],
    "screenReaderNextText": [{ type: Input },],
    "screenReaderLastText": [{ type: Input },],
    "screenReaderPageText": [{ type: Input },],
    "screenReaderCurrentPageText": [{ type: Input },],
    "screenReaderPaginationLabel": [{ type: Input },],
    "className": [{ type: Input },],
    "autoHide": [{ type: Input },],
    "disabled": [{ type: Input },],
    "pageChange": [{ type: Output },],
};

class AngularPaginatorPipe {
    constructor(_angularPaginatorService) {
        this._angularPaginatorService = _angularPaginatorService;
    }
    transform(array, args) {
        const                  instance = this.createInstance(array, args);
        this._angularPaginatorService.registerInstance(instance);
        const                  start = (instance.currentPage - 1) * instance.itemsPerPage;
        const                  end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    }
    createInstance(array, args) {
        return {
            id: args['id'] ? args.id : this._angularPaginatorService.id,
            currentPage: args['currentPage'] ? args['currentPage'] : 1,
            itemsPerPage: args['itemsPerPage'] ? args['itemsPerPage'] : 10,
            totalItems: array['length']
        };
    }
}
AngularPaginatorPipe.decorators = [
    { type: Pipe, args: [{
                name: 'angularPaginator'
            },] },
];
AngularPaginatorPipe.ctorParameters = () => [
    { type: AngularPaginatorService, },
];

class AngularPaginatorDirective {
    constructor(_angularPaginatorService, _changeDetectorRef) {
        this._angularPaginatorService = _angularPaginatorService;
        this._changeDetectorRef = _changeDetectorRef;
        this.firstPage = 1;
        this.pages = [];
        this.subscription = new Subject();
        this.pageChange = new EventEmitter(true);
        this.subscription = this._angularPaginatorService.change.subscribe(id => {
            if (id === this.id) {
                this.updatePages();
                this._changeDetectorRef.markForCheck();
            }
        });
    }
    toPreviousPage() {
        if (this.currentPage > this.firstPage) {
            this.setCurrentPage(this.currentPage - 1);
        }
        return;
    }
    toNextPage() {
        if (this.currentPage < this.lastPage) {
            this.setCurrentPage(this.currentPage + 1);
        }
        return;
    }
    toFirstPage() {
        this.setCurrentPage(this.firstPage);
        return;
    }
    toLastPage() {
        this.setCurrentPage(this.lastPage);
        return;
    }
    setCurrentPage(page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
        return;
    }
    makePage(number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    }
    getPages(currentPage, itemsPerPage, totalItems) {
        const                  pages = [];
        const                  totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        let                  startPage = 1;
        let                  endPage = totalPages;
        const                  isMaxSized = this.maxSize && this.maxSize < totalPages;
        if (isMaxSized) {
            if (this.rotate) {
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        for (let                  number = startPage; number <= endPage; number++) {
            const                  page = this.makePage(number, number, number === currentPage);
            pages.push(page);
        }
        if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                if (!this.boundaryLinkNumbers || startPage > 3) {
                    const                  previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) {
                        const                  secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    const                  firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                    const                  nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) {
                        const                  secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    const                  lastPageLink = this.makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    }
    updatePages() {
        const                  instance = this._angularPaginatorService.getInstance(this.id);
        const                  correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {
            this.setCurrentPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
        return;
    }
    outOfBoundCorrection(instance) {
        const                  totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);
        if (totalPages < instance['currentPage'] && 0 < totalPages) {
            return totalPages;
        }
        else if (instance['currentPage'] < 1) {
            return 1;
        }
        return instance['currentPage'];
    }
    isValidId() {
        if (!this._angularPaginatorService.getInstance(this.id)) {
            throw new Error('There is no instance registered with id `' + this.id + '`');
        }
        return;
    }
    ngOnInit() {
        this.isValidId();
        this.updatePages();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
AngularPaginatorDirective.decorators = [
    { type: Directive, args: [{
                selector: 'appAngularPaginator, [appAngularPaginator]',
                exportAs: 'angularPaginator'
            },] },
];
AngularPaginatorDirective.ctorParameters = () => [
    { type: AngularPaginatorService, },
    { type: ChangeDetectorRef, },
];
AngularPaginatorDirective.propDecorators = {
    "boundaryLinks": [{ type: Input },],
    "directionLinks": [{ type: Input },],
    "maxSize": [{ type: Input },],
    "rotate": [{ type: Input },],
    "boundaryLinkNumbers": [{ type: Input },],
    "forceEllipses": [{ type: Input },],
    "id": [{ type: Input },],
    "pageChange": [{ type: Output },],
};

class AngularPaginatorModule {
}
AngularPaginatorModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                providers: [AngularPaginatorService],
                declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],
                exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]
            },] },
];

export { AngularPaginatorModule, AngularPaginatorComponent as ɵb, AngularPaginatorDirective as ɵd, AngularPaginatorPipe as ɵc, AngularPaginatorService as ɵa };
//# sourceMappingURL=angular-paginator.js.map
