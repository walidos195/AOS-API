{
  "version": 3,
  "file": "angular-paginator.umd.js",
  "sources": [
    "ng://angular-paginator/out/app/angular-paginator/angular-paginator.module.ts",
    "ng://angular-paginator/out/app/angular-paginator/directives/angular-paginator.directive.ts",
    "ng://angular-paginator/out/app/angular-paginator/pipes/angular-paginator.pipe.ts",
    "ng://angular-paginator/out/app/angular-paginator/angular-paginator.component.ts",
    "ng://angular-paginator/out/app/angular-paginator/services/angular-paginator.service.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularPaginatorComponent } from './angular-paginator.component';\r\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\r\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\r\nimport { AngularPaginatorService } from './services/angular-paginator.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [AngularPaginatorService],\r\n  declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],\r\n  exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]\r\n})\r\n\r\nexport class AngularPaginatorModule { }\r\n",
    "import { Directive, OnInit, OnDestroy, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\r\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n/**\r\n * This is the directive where the actual pagination takes place, it provides a sync between the\r\n * pipes and the pagination component\r\n */\r\n@Directive({\r\n  selector: 'appAngularPaginator, [appAngularPaginator]',\r\n  exportAs: 'angularPaginator'\r\n})\r\n\r\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Whether to display First / Last buttons\r\n   */\r\n  @Input() boundaryLinks: boolean;\r\n  /**\r\n  * Whether to display Previous / Next buttons\r\n  */\r\n  @Input() directionLinks: boolean;\r\n  /**\r\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\r\n   */\r\n  @Input() maxSize: number;\r\n  /**\r\n   * Whether to keep current page in the middle of the visible ones\r\n   */\r\n  @Input() rotate: boolean;\r\n  /**\r\n   * Whether to always display the first and last page numbers.\r\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\r\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\r\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\r\n   * what would be an ellipsis but is replaced by a number because it is sequential\r\n   */\r\n  @Input() boundaryLinkNumbers: boolean;\r\n  /**\r\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\r\n   */\r\n  @Input() forceEllipses: boolean;\r\n  /**\r\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\r\n   */\r\n  @Input() id: string;\r\n\r\n  currentPage: number;\r\n  firstPage = 1;\r\n  lastPage: number;\r\n  pages: Page[] = [];\r\n\r\n  private subscription: Subject<any> = new Subject();\r\n\r\n  /**\r\n   * Emits an event whenever the current page is changed, It emits the current page number\r\n   */\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\r\n\r\n  /**\r\n   *\r\n   * @param _angularPaginatorService serivce for angular paginator\r\n   * @param _changeDetectorRef for manual change detection\r\n   */\r\n  constructor(private _angularPaginatorService: AngularPaginatorService,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    // subscribe to changes\r\n    this.subscription = this._angularPaginatorService.change.subscribe(id => {\r\n      if (id === this.id) {\r\n        this.updatePages();\r\n        this._changeDetectorRef.markForCheck();\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Navigate to prevoius page\r\n   */\r\n  toPreviousPage(): void {\r\n    if (this.currentPage > this.firstPage) {\r\n      this.setCurrentPage(this.currentPage - 1);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Navigate to next page\r\n   */\r\n  toNextPage(): void {\r\n    if (this.currentPage < this.lastPage) {\r\n      this.setCurrentPage(this.currentPage + 1);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Navigate to first page\r\n   */\r\n  toFirstPage(): void {\r\n    this.setCurrentPage(this.firstPage);\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Navigate to last page\r\n   */\r\n  toLastPage(): void {\r\n    this.setCurrentPage(this.lastPage);\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Sets current page\r\n   *\r\n   * @param page page number to set as currentPage\r\n   */\r\n  setCurrentPage(page: number): void {\r\n    if (page && this.currentPage !== page) {\r\n      this.currentPage = page;\r\n      this.pageChange.emit(page);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * create page object used for template\r\n   *\r\n   * @param number page number\r\n   * @param text page number, text to be displayed\r\n   * @param isActive whether the page is active or not, true for currentPage\r\n   */\r\n  makePage(number: number, text: any, isActive: boolean): any {\r\n    return {\r\n      number: number,\r\n      text: text,\r\n      active: isActive\r\n    };\r\n  }\r\n\r\n  /**\r\n   *  create page array\r\n   *\r\n   * @param currentPage current page number\r\n   * @param itemsPerPage total items per page\r\n   * @param totalItems no of items for pagination, usually array length\r\n   */\r\n  getPages(currentPage: number, itemsPerPage: number, totalItems: number): any {\r\n    const pages: any = [];\r\n\r\n    // Default page limits\r\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    let startPage = 1;\r\n    let endPage: number = totalPages;\r\n    const isMaxSized: boolean = this.maxSize && this.maxSize < totalPages;\r\n\r\n    // recompute if maxSize\r\n    if (isMaxSized) {\r\n\r\n      if (this.rotate) {\r\n\r\n        // current page is displayed in the middle of the visible ones\r\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\r\n        endPage = startPage + this.maxSize - 1;\r\n\r\n        // Adjust if limit is exceeded\r\n        if (endPage > totalPages) {\r\n          endPage = totalPages;\r\n          startPage = endPage - this.maxSize + 1;\r\n        }\r\n      } else {\r\n        // Visible pages are paginated with maxSize\r\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\r\n\r\n        // adjust last page if limit is exceeded\r\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\r\n      }\r\n    }\r\n\r\n    // add page number links\r\n    for (let number = startPage; number <= endPage; number++) {\r\n      const page = this.makePage(number, number, number === currentPage);\r\n      pages.push(page);\r\n    }\r\n\r\n    // add links to move between page sets\r\n    if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\r\n      if (startPage > 1) {\r\n\r\n        if (!this.boundaryLinkNumbers || startPage > 3) { // need ellipsis for all options unless range is too close to beginning\r\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\r\n          pages.unshift(previousPageSet);\r\n        }\r\n\r\n        if (this.boundaryLinkNumbers) {\r\n\r\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\r\n            const secondPageLink = this.makePage(2, '2', false);\r\n            pages.unshift(secondPageLink);\r\n          }\r\n\r\n          // add the first page\r\n          const firstPageLink = this.makePage(1, '1', false);\r\n          pages.unshift(firstPageLink);\r\n        }\r\n      }\r\n\r\n      if (endPage < totalPages) {\r\n\r\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) { // need ellipsis for all options unless range is too close to end\r\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\r\n          pages.push(nextPageSet);\r\n        }\r\n\r\n        if (this.boundaryLinkNumbers) {\r\n\r\n          if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential\r\n            const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);\r\n            pages.push(secondToLastPageLink);\r\n          }\r\n\r\n          // add the last page\r\n          const lastPageLink = this.makePage(totalPages, totalPages, false);\r\n          pages.push(lastPageLink);\r\n        }\r\n      }\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination component\r\n   */\r\n  updatePages(): void {\r\n    const instance: AngularPaginatorInstance = this._angularPaginatorService.getInstance(this.id);\r\n\r\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\r\n\r\n    if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {\r\n      this.setCurrentPage(correctedCurrentPage);\r\n    }\r\n\r\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Check if currentPage is out of bound with totalPages\r\n   *\r\n   * @param instance instance for which the range is to be corrected\r\n   */\r\n  outOfBoundCorrection(instance: AngularPaginatorInstance): number {\r\n\r\n    const totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);\r\n\r\n    if (totalPages < instance['currentPage'] && 0 < totalPages) {\r\n      return totalPages;\r\n    } else if (instance['currentPage'] < 1) {\r\n      return 1;\r\n    }\r\n\r\n    return instance['currentPage'];\r\n  }\r\n\r\n  /**\r\n   * check if there is any instance registered with the id\r\n   */\r\n  isValidId(): void {\r\n\r\n    if (!this._angularPaginatorService.getInstance(this.id)) {\r\n      throw new Error('There is no instance registered with id `' + this.id + '`');\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isValidId();\r\n    this.updatePages();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    /** destroy the subscription when the directive is destroyed */\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n}\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\r\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\r\n\r\n/**\r\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\r\n */\r\n@Pipe({\r\n  name: 'angularPaginator'\r\n})\r\n\r\nexport class AngularPaginatorPipe implements PipeTransform {\r\n\r\n  /**\r\n   *\r\n   * @param _angularPaginatorService service for angular pagiantor\r\n   */\r\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\r\n\r\n  /**\r\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\r\n   *\r\n   * @param array input array for which the manipulation happens\r\n   * @param args input arguments for the paginator pipe\r\n   */\r\n  transform(array: any, args?: any): any {\r\n\r\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\r\n\r\n    // create pagination information\r\n    this._angularPaginatorService.registerInstance(instance);\r\n\r\n    // set the slicing range\r\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\r\n    const end = instance.currentPage * instance.itemsPerPage;\r\n\r\n    return array.slice(start, end);\r\n\r\n  }\r\n\r\n  /**\r\n   * create an instance for each pipe\r\n   *\r\n   * @param array input array for which the manipulation happens\r\n   * @param args input arguments for the paginator pipe\r\n   */\r\n  createInstance(array: any, args: any): any {\r\n    return {\r\n      id: args['id'] ? args.id : this._angularPaginatorService.id,\r\n      currentPage: args['currentPage'] ? args['currentPage'] : 1,\r\n      itemsPerPage: args['itemsPerPage'] ? args['itemsPerPage'] : 10,\r\n      totalItems: array['length']\r\n    };\r\n\r\n  }\r\n\r\n}\r\n",
    "import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\r\nimport { AngularPaginatorService } from './services/angular-paginator.service';\r\n\r\n/**\r\n * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component\r\n */\r\n@Component({\r\n  selector: 'app-angular-paginator',\r\n  template: `<appAngularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\" [rotate]=\"rotate\"\r\n  [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\" (pageChange)=\"pageChange.emit($event)\">\r\n\r\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\r\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\r\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n\r\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\r\n        <ul class=\"pagination\" [ngClass]=\"className\">\r\n\r\n          <!-- boundary link -->\r\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- direction link -->\r\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- pagination array -->\r\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\" (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\r\n            <a href=\"javascript:void(0)\" class=\"page-link\">\r\n              {{ page['text'] }}\r\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\r\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- direction link -->\r\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- boundary link -->\r\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n        </ul>\r\n      </ng-container>\r\n\r\n    </nav>\r\n  </ng-container>\r\n\r\n</appAngularPaginator>\r\n`,\r\n  styles: [`.angular-bs4-pagination .disabled{pointer-events:none}`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class AngularPaginatorComponent implements OnInit {\r\n\r\n  /**\r\n   * Whether to display First / Last buttons\r\n   */\r\n  @Input() boundaryLinks = false;\r\n  /**\r\n   * Whether to display Previous / Next buttons\r\n   */\r\n  @Input() directionLinks = true;\r\n  /**\r\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\r\n   */\r\n  @Input() maxSize = 5;\r\n  /**\r\n   * Whether to keep current page in the middle of the visible ones\r\n   */\r\n  @Input() rotate = true;\r\n  /**\r\n    * Whether to always display the first and last page numbers.\r\n    * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\r\n    * in-between as necessary. NOTE: max-size refers to the center of the range.\r\n    * This option may add up to 2 more numbers on each side of the displayed range for the end value and\r\n    * what would be an ellipsis but is replaced by a number because it is sequential\r\n    */\r\n  @Input() boundaryLinkNumbers = false;\r\n  /**\r\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\r\n   */\r\n  @Input() forceEllipses = false;\r\n  /**\r\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\r\n   */\r\n  @Input() id: string;\r\n  /**\r\n   * Text for first button\r\n   */\r\n  @Input() firstText = 'First';\r\n  /**\r\n   * Text for previous button\r\n   */\r\n  @Input() previousText = 'Previous';\r\n  /**\r\n   * Text for next button\r\n   */\r\n  @Input() nextText = 'Next';\r\n  /**\r\n   * Text for last button\r\n   */\r\n  @Input() lastText = 'Last';\r\n  /**\r\n   * Screen reader text for first button\r\n   */\r\n  @Input() screenReaderFirstText = 'First';\r\n  /**\r\n  * Screen reader text for previous button\r\n  */\r\n  @Input() screenReaderPreviousText = 'Previous';\r\n  /**\r\n  * Screen reader text for next button\r\n  */\r\n  @Input() screenReaderNextText = 'Next';\r\n  /**\r\n  * Screen reader text for lasr button\r\n  */\r\n  @Input() screenReaderLastText = 'Last';\r\n  /**\r\n  * Screen reader text for page numbers\r\n  */\r\n  @Input() screenReaderPageText = 'Page';\r\n  /**\r\n  * Screen reader text for current page\r\n  */\r\n  @Input() screenReaderCurrentPageText = 'You`re on page';\r\n  /**\r\n  * Screen reader text for the pagination component\r\n  */\r\n  @Input() screenReaderPaginationLabel = 'Pagination';\r\n  /**\r\n  * Adds custom class to the pagination element\r\n  */\r\n  @Input() className: string;\r\n  /**\r\n   * Hides the pagination component if the items are less than `itemsPerPage`\r\n   */\r\n  @Input() autoHide = false;\r\n  /**\r\n   * disables pagination component\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  /**\r\n   * Emits an event whenever the current page is changed, It emits the current page number\r\n   *\r\n   * This event is originally picked up from `AngularPaginatorDirective`\r\n   */\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   *\r\n   * @param _angularPaginatorService service for angular paginator\r\n   */\r\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // set default id if not provided\r\n    this.id = this.id ? this.id : this._angularPaginatorService.id;\r\n\r\n    // set default class if not provided\r\n    this.className = this.className ? this.className : this._angularPaginatorService.id;\r\n\r\n  }\r\n\r\n}\r\n",
    "import { Injectable, EventEmitter } from '@angular/core';\r\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\r\n\r\n@Injectable()\r\nexport class AngularPaginatorService {\r\n\r\n  /** id is used to identify pagination instances */\r\n  id = 'ANGULAR_PAGINATOR_DEFAULT';\r\n\r\n  /** instances is the collection of pagination componetns */\r\n  instances: any = {};\r\n\r\n  /** emits an event with instance id whenever the page number changes */\r\n  change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * creates an instance for every pipe differentiated with id\r\n   *\r\n   * @param instance each instance refers to a unique pagination component\r\n   */\r\n  registerInstance(instance: AngularPaginatorInstance): void {\r\n\r\n    if (!this.instances[instance.id]) {\r\n      this.instances[instance.id] = instance;\r\n      this.change.emit(instance.id);\r\n    } else {\r\n      const changed = this.updateInstance(instance);\r\n      if (changed) {\r\n        this.change.emit(instance.id);\r\n      }\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * updates existing pagination instances available\r\n   * and returns true if value has changed\r\n   *\r\n   * @param instance an unique pagination component\r\n   */\r\n  updateInstance(instance: AngularPaginatorInstance): boolean {\r\n\r\n    for (const key in instance) {\r\n      if (instance[key] !== this.instances[instance['id']][key]) {\r\n        this.instances[instance['id']][key] = instance[key];\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * return instance with given id\r\n   *\r\n   * @param id unique id of the pagination component\r\n   */\r\n  getInstance(id: string): any {\r\n    return this.instances[id];\r\n  }\r\n\r\n  /**\r\n   * return currentPage for given id\r\n   *\r\n   * @param id unique id of the pagination component\r\n   */\r\n  getCurrentPage(id: string): number {\r\n    return this.instances[id].currentPage;\r\n  }\r\n\r\n}\r\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Output",
    "Input",
    "ChangeDetectorRef",
    "Directive",
    "EventEmitter",
    "Subject",
    "Pipe",
    "ChangeDetectionStrategy",
    "Component",
    "Injectable"
  ],
  "mappings": "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"
}
