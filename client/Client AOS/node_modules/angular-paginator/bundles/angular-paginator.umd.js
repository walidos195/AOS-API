/**
 * MIT License
 * 
 * Copyright (c) 2017-2018 Sibiraj
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Subject'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('angular-paginator', ['exports', '@angular/core', 'rxjs/Subject', '@angular/common'], factory) :
	(factory((global['angular-paginator'] = {}),global.ng.core,global.Rx,global.ng.common));
}(this, (function (exports,core,Subject,common) { 'use strict';

var AngularPaginatorService =               (function () {
    function AngularPaginatorService() {
        this.id = 'ANGULAR_PAGINATOR_DEFAULT';
        this.instances = {};
        this.change = new core.EventEmitter();
    }
    AngularPaginatorService.prototype.registerInstance = function (instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            var changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
        return;
    };
    AngularPaginatorService.prototype.updateInstance = function (instance) {
        for (var key in instance) {
            if (instance[key] !== this.instances[instance['id']][key]) {
                this.instances[instance['id']][key] = instance[key];
                return true;
            }
        }
        return false;
    };
    AngularPaginatorService.prototype.getInstance = function (id) {
        return this.instances[id];
    };
    AngularPaginatorService.prototype.getCurrentPage = function (id) {
        return this.instances[id].currentPage;
    };
    return AngularPaginatorService;
}());
AngularPaginatorService.decorators = [
    { type: core.Injectable },
];
AngularPaginatorService.ctorParameters = function () { return []; };
var AngularPaginatorComponent =               (function () {
    function AngularPaginatorComponent(_angularPaginatorService) {
        this._angularPaginatorService = _angularPaginatorService;
        this.boundaryLinks = false;
        this.directionLinks = true;
        this.maxSize = 5;
        this.rotate = true;
        this.boundaryLinkNumbers = false;
        this.forceEllipses = false;
        this.firstText = 'First';
        this.previousText = 'Previous';
        this.nextText = 'Next';
        this.lastText = 'Last';
        this.screenReaderFirstText = 'First';
        this.screenReaderPreviousText = 'Previous';
        this.screenReaderNextText = 'Next';
        this.screenReaderLastText = 'Last';
        this.screenReaderPageText = 'Page';
        this.screenReaderCurrentPageText = 'You`re on page';
        this.screenReaderPaginationLabel = 'Pagination';
        this.autoHide = false;
        this.disabled = false;
        this.pageChange = new core.EventEmitter();
    }
    AngularPaginatorComponent.prototype.ngOnInit = function () {
        this.id = this.id ? this.id : this._angularPaginatorService.id;
        this.className = this.className ? this.className : this._angularPaginatorService.id;
    };
    return AngularPaginatorComponent;
}());
AngularPaginatorComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'app-angular-paginator',
                template: "<appAngularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\" [rotate]=\"rotate\"\n  [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\" (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\" (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</appAngularPaginator>\n",
                styles: [".angular-bs4-pagination .disabled{pointer-events:none}"],
                changeDetection: core.ChangeDetectionStrategy.OnPush
            },] },
];
AngularPaginatorComponent.ctorParameters = function () { return [
    { type: AngularPaginatorService, },
]; };
AngularPaginatorComponent.propDecorators = {
    "boundaryLinks": [{ type: core.Input },],
    "directionLinks": [{ type: core.Input },],
    "maxSize": [{ type: core.Input },],
    "rotate": [{ type: core.Input },],
    "boundaryLinkNumbers": [{ type: core.Input },],
    "forceEllipses": [{ type: core.Input },],
    "id": [{ type: core.Input },],
    "firstText": [{ type: core.Input },],
    "previousText": [{ type: core.Input },],
    "nextText": [{ type: core.Input },],
    "lastText": [{ type: core.Input },],
    "screenReaderFirstText": [{ type: core.Input },],
    "screenReaderPreviousText": [{ type: core.Input },],
    "screenReaderNextText": [{ type: core.Input },],
    "screenReaderLastText": [{ type: core.Input },],
    "screenReaderPageText": [{ type: core.Input },],
    "screenReaderCurrentPageText": [{ type: core.Input },],
    "screenReaderPaginationLabel": [{ type: core.Input },],
    "className": [{ type: core.Input },],
    "autoHide": [{ type: core.Input },],
    "disabled": [{ type: core.Input },],
    "pageChange": [{ type: core.Output },],
};
var AngularPaginatorPipe =               (function () {
    function AngularPaginatorPipe(_angularPaginatorService) {
        this._angularPaginatorService = _angularPaginatorService;
    }
    AngularPaginatorPipe.prototype.transform = function (array, args) {
        var instance = this.createInstance(array, args);
        this._angularPaginatorService.registerInstance(instance);
        var start = (instance.currentPage - 1) * instance.itemsPerPage;
        var end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    };
    AngularPaginatorPipe.prototype.createInstance = function (array, args) {
        return {
            id: args['id'] ? args.id : this._angularPaginatorService.id,
            currentPage: args['currentPage'] ? args['currentPage'] : 1,
            itemsPerPage: args['itemsPerPage'] ? args['itemsPerPage'] : 10,
            totalItems: array['length']
        };
    };
    return AngularPaginatorPipe;
}());
AngularPaginatorPipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'angularPaginator'
            },] },
];
AngularPaginatorPipe.ctorParameters = function () { return [
    { type: AngularPaginatorService, },
]; };
var AngularPaginatorDirective =               (function () {
    function AngularPaginatorDirective(_angularPaginatorService, _changeDetectorRef) {
        var _this = this;
        this._angularPaginatorService = _angularPaginatorService;
        this._changeDetectorRef = _changeDetectorRef;
        this.firstPage = 1;
        this.pages = [];
        this.subscription = new Subject.Subject();
        this.pageChange = new core.EventEmitter(true);
        this.subscription = this._angularPaginatorService.change.subscribe(function (id) {
            if (id === _this.id) {
                _this.updatePages();
                _this._changeDetectorRef.markForCheck();
            }
        });
    }
    AngularPaginatorDirective.prototype.toPreviousPage = function () {
        if (this.currentPage > this.firstPage) {
            this.setCurrentPage(this.currentPage - 1);
        }
        return;
    };
    AngularPaginatorDirective.prototype.toNextPage = function () {
        if (this.currentPage < this.lastPage) {
            this.setCurrentPage(this.currentPage + 1);
        }
        return;
    };
    AngularPaginatorDirective.prototype.toFirstPage = function () {
        this.setCurrentPage(this.firstPage);
        return;
    };
    AngularPaginatorDirective.prototype.toLastPage = function () {
        this.setCurrentPage(this.lastPage);
        return;
    };
    AngularPaginatorDirective.prototype.setCurrentPage = function (page) {
        if (page && this.currentPage !== page) {
            this.currentPage = page;
            this.pageChange.emit(page);
        }
        return;
    };
    AngularPaginatorDirective.prototype.makePage = function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive
        };
    };
    AngularPaginatorDirective.prototype.getPages = function (currentPage, itemsPerPage, totalItems) {
        var pages = [];
        var totalPages = this.lastPage = Math.ceil(totalItems / itemsPerPage);
        var startPage = 1;
        var endPage = totalPages;
        var isMaxSized = this.maxSize && this.maxSize < totalPages;
        if (isMaxSized) {
            if (this.rotate) {
                startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);
                endPage = startPage + this.maxSize - 1;
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxSize + 1;
                }
            }
            else {
                startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;
                endPage = Math.min(startPage + this.maxSize - 1, totalPages);
            }
        }
        for (var number = startPage; number <= endPage; number++) {
            var page = this.makePage(number, number, number === currentPage);
            pages.push(page);
        }
        if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {
            if (startPage > 1) {
                if (!this.boundaryLinkNumbers || startPage > 3) {
                    var previousPageSet = this.makePage(startPage - 1, '...', false);
                    pages.unshift(previousPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (startPage === 3) {
                        var secondPageLink = this.makePage(2, '2', false);
                        pages.unshift(secondPageLink);
                    }
                    var firstPageLink = this.makePage(1, '1', false);
                    pages.unshift(firstPageLink);
                }
            }
            if (endPage < totalPages) {
                if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {
                    var nextPageSet = this.makePage(endPage + 1, '...', false);
                    pages.push(nextPageSet);
                }
                if (this.boundaryLinkNumbers) {
                    if (endPage === totalPages - 2) {
                        var secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);
                        pages.push(secondToLastPageLink);
                    }
                    var lastPageLink = this.makePage(totalPages, totalPages, false);
                    pages.push(lastPageLink);
                }
            }
        }
        return pages;
    };
    AngularPaginatorDirective.prototype.updatePages = function () {
        var instance = this._angularPaginatorService.getInstance(this.id);
        var correctedCurrentPage = this.outOfBoundCorrection(instance);
        if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {
            this.setCurrentPage(correctedCurrentPage);
        }
        this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);
        return;
    };
    AngularPaginatorDirective.prototype.outOfBoundCorrection = function (instance) {
        var totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);
        if (totalPages < instance['currentPage'] && 0 < totalPages) {
            return totalPages;
        }
        else if (instance['currentPage'] < 1) {
            return 1;
        }
        return instance['currentPage'];
    };
    AngularPaginatorDirective.prototype.isValidId = function () {
        if (!this._angularPaginatorService.getInstance(this.id)) {
            throw new Error('There is no instance registered with id `' + this.id + '`');
        }
        return;
    };
    AngularPaginatorDirective.prototype.ngOnInit = function () {
        this.isValidId();
        this.updatePages();
    };
    AngularPaginatorDirective.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    return AngularPaginatorDirective;
}());
AngularPaginatorDirective.decorators = [
    { type: core.Directive, args: [{
                selector: 'appAngularPaginator, [appAngularPaginator]',
                exportAs: 'angularPaginator'
            },] },
];
AngularPaginatorDirective.ctorParameters = function () { return [
    { type: AngularPaginatorService, },
    { type: core.ChangeDetectorRef, },
]; };
AngularPaginatorDirective.propDecorators = {
    "boundaryLinks": [{ type: core.Input },],
    "directionLinks": [{ type: core.Input },],
    "maxSize": [{ type: core.Input },],
    "rotate": [{ type: core.Input },],
    "boundaryLinkNumbers": [{ type: core.Input },],
    "forceEllipses": [{ type: core.Input },],
    "id": [{ type: core.Input },],
    "pageChange": [{ type: core.Output },],
};
var AngularPaginatorModule =               (function () {
    function AngularPaginatorModule() {
    }
    return AngularPaginatorModule;
}());
AngularPaginatorModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule
                ],
                providers: [AngularPaginatorService],
                declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],
                exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]
            },] },
];

exports.AngularPaginatorModule = AngularPaginatorModule;
exports.ɵb = AngularPaginatorComponent;
exports.ɵd = AngularPaginatorDirective;
exports.ɵc = AngularPaginatorPipe;
exports.ɵa = AngularPaginatorService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-paginator.umd.js.map
