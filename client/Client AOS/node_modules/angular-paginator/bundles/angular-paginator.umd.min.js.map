{
  "version": 3,
  "file": "angular-paginator.umd.min.js",
  "sources": [
    "ng://angular-paginator/out/app/angular-paginator/services/angular-paginator.service.ts",
    "ng://angular-paginator/out/app/angular-paginator/angular-paginator.component.ts",
    "ng://angular-paginator/out/app/angular-paginator/pipes/angular-paginator.pipe.ts",
    "ng://angular-paginator/out/app/angular-paginator/directives/angular-paginator.directive.ts",
    "ng://angular-paginator/out/app/angular-paginator/angular-paginator.module.ts"
  ],
  "sourcesContent": [
    "import { Injectable, EventEmitter } from '@angular/core';\r\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\r\n\r\n@Injectable()\r\nexport class AngularPaginatorService {\r\n\r\n  /** id is used to identify pagination instances */\r\n  id = 'ANGULAR_PAGINATOR_DEFAULT';\r\n\r\n  /** instances is the collection of pagination componetns */\r\n  instances: any = {};\r\n\r\n  /** emits an event with instance id whenever the page number changes */\r\n  change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * creates an instance for every pipe differentiated with id\r\n   *\r\n   * @param instance each instance refers to a unique pagination component\r\n   */\r\n  registerInstance(instance: AngularPaginatorInstance): void {\r\n\r\n    if (!this.instances[instance.id]) {\r\n      this.instances[instance.id] = instance;\r\n      this.change.emit(instance.id);\r\n    } else {\r\n      const changed = this.updateInstance(instance);\r\n      if (changed) {\r\n        this.change.emit(instance.id);\r\n      }\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * updates existing pagination instances available\r\n   * and returns true if value has changed\r\n   *\r\n   * @param instance an unique pagination component\r\n   */\r\n  updateInstance(instance: AngularPaginatorInstance): boolean {\r\n\r\n    for (const key in instance) {\r\n      if (instance[key] !== this.instances[instance['id']][key]) {\r\n        this.instances[instance['id']][key] = instance[key];\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * return instance with given id\r\n   *\r\n   * @param id unique id of the pagination component\r\n   */\r\n  getInstance(id: string): any {\r\n    return this.instances[id];\r\n  }\r\n\r\n  /**\r\n   * return currentPage for given id\r\n   *\r\n   * @param id unique id of the pagination component\r\n   */\r\n  getCurrentPage(id: string): number {\r\n    return this.instances[id].currentPage;\r\n  }\r\n\r\n}\r\n",
    "import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\r\nimport { AngularPaginatorService } from './services/angular-paginator.service';\r\n\r\n/**\r\n * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component\r\n */\r\n@Component({\r\n  selector: 'app-angular-paginator',\r\n  template: `<appAngularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\" [rotate]=\"rotate\"\r\n  [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\" (pageChange)=\"pageChange.emit($event)\">\r\n\r\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\r\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\r\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n\r\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\r\n        <ul class=\"pagination\" [ngClass]=\"className\">\r\n\r\n          <!-- boundary link -->\r\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- direction link -->\r\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- pagination array -->\r\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\" (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\r\n            <a href=\"javascript:void(0)\" class=\"page-link\">\r\n              {{ page['text'] }}\r\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\r\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- direction link -->\r\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n          <!-- boundary link -->\r\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\r\n            <a class=\"page-link\" href=\"javascript:void(0)\">\r\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\r\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\r\n            </a>\r\n          </li>\r\n\r\n        </ul>\r\n      </ng-container>\r\n\r\n    </nav>\r\n  </ng-container>\r\n\r\n</appAngularPaginator>\r\n`,\r\n  styles: [`.angular-bs4-pagination .disabled{pointer-events:none}`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class AngularPaginatorComponent implements OnInit {\r\n\r\n  /**\r\n   * Whether to display First / Last buttons\r\n   */\r\n  @Input() boundaryLinks = false;\r\n  /**\r\n   * Whether to display Previous / Next buttons\r\n   */\r\n  @Input() directionLinks = true;\r\n  /**\r\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\r\n   */\r\n  @Input() maxSize = 5;\r\n  /**\r\n   * Whether to keep current page in the middle of the visible ones\r\n   */\r\n  @Input() rotate = true;\r\n  /**\r\n    * Whether to always display the first and last page numbers.\r\n    * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\r\n    * in-between as necessary. NOTE: max-size refers to the center of the range.\r\n    * This option may add up to 2 more numbers on each side of the displayed range for the end value and\r\n    * what would be an ellipsis but is replaced by a number because it is sequential\r\n    */\r\n  @Input() boundaryLinkNumbers = false;\r\n  /**\r\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\r\n   */\r\n  @Input() forceEllipses = false;\r\n  /**\r\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\r\n   */\r\n  @Input() id: string;\r\n  /**\r\n   * Text for first button\r\n   */\r\n  @Input() firstText = 'First';\r\n  /**\r\n   * Text for previous button\r\n   */\r\n  @Input() previousText = 'Previous';\r\n  /**\r\n   * Text for next button\r\n   */\r\n  @Input() nextText = 'Next';\r\n  /**\r\n   * Text for last button\r\n   */\r\n  @Input() lastText = 'Last';\r\n  /**\r\n   * Screen reader text for first button\r\n   */\r\n  @Input() screenReaderFirstText = 'First';\r\n  /**\r\n  * Screen reader text for previous button\r\n  */\r\n  @Input() screenReaderPreviousText = 'Previous';\r\n  /**\r\n  * Screen reader text for next button\r\n  */\r\n  @Input() screenReaderNextText = 'Next';\r\n  /**\r\n  * Screen reader text for lasr button\r\n  */\r\n  @Input() screenReaderLastText = 'Last';\r\n  /**\r\n  * Screen reader text for page numbers\r\n  */\r\n  @Input() screenReaderPageText = 'Page';\r\n  /**\r\n  * Screen reader text for current page\r\n  */\r\n  @Input() screenReaderCurrentPageText = 'You`re on page';\r\n  /**\r\n  * Screen reader text for the pagination component\r\n  */\r\n  @Input() screenReaderPaginationLabel = 'Pagination';\r\n  /**\r\n  * Adds custom class to the pagination element\r\n  */\r\n  @Input() className: string;\r\n  /**\r\n   * Hides the pagination component if the items are less than `itemsPerPage`\r\n   */\r\n  @Input() autoHide = false;\r\n  /**\r\n   * disables pagination component\r\n   */\r\n  @Input() disabled = false;\r\n\r\n  /**\r\n   * Emits an event whenever the current page is changed, It emits the current page number\r\n   *\r\n   * This event is originally picked up from `AngularPaginatorDirective`\r\n   */\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  /**\r\n   *\r\n   * @param _angularPaginatorService service for angular paginator\r\n   */\r\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\r\n\r\n  ngOnInit() {\r\n\r\n    // set default id if not provided\r\n    this.id = this.id ? this.id : this._angularPaginatorService.id;\r\n\r\n    // set default class if not provided\r\n    this.className = this.className ? this.className : this._angularPaginatorService.id;\r\n\r\n  }\r\n\r\n}\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\r\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\r\n\r\n/**\r\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\r\n */\r\n@Pipe({\r\n  name: 'angularPaginator'\r\n})\r\n\r\nexport class AngularPaginatorPipe implements PipeTransform {\r\n\r\n  /**\r\n   *\r\n   * @param _angularPaginatorService service for angular pagiantor\r\n   */\r\n  constructor(private _angularPaginatorService: AngularPaginatorService) { }\r\n\r\n  /**\r\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\r\n   *\r\n   * @param array input array for which the manipulation happens\r\n   * @param args input arguments for the paginator pipe\r\n   */\r\n  transform(array: any, args?: any): any {\r\n\r\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\r\n\r\n    // create pagination information\r\n    this._angularPaginatorService.registerInstance(instance);\r\n\r\n    // set the slicing range\r\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\r\n    const end = instance.currentPage * instance.itemsPerPage;\r\n\r\n    return array.slice(start, end);\r\n\r\n  }\r\n\r\n  /**\r\n   * create an instance for each pipe\r\n   *\r\n   * @param array input array for which the manipulation happens\r\n   * @param args input arguments for the paginator pipe\r\n   */\r\n  createInstance(array: any, args: any): any {\r\n    return {\r\n      id: args['id'] ? args.id : this._angularPaginatorService.id,\r\n      currentPage: args['currentPage'] ? args['currentPage'] : 1,\r\n      itemsPerPage: args['itemsPerPage'] ? args['itemsPerPage'] : 10,\r\n      totalItems: array['length']\r\n    };\r\n\r\n  }\r\n\r\n}\r\n",
    "import { Directive, OnInit, OnDestroy, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\r\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\r\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n/**\r\n * This is the directive where the actual pagination takes place, it provides a sync between the\r\n * pipes and the pagination component\r\n */\r\n@Directive({\r\n  selector: 'appAngularPaginator, [appAngularPaginator]',\r\n  exportAs: 'angularPaginator'\r\n})\r\n\r\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Whether to display First / Last buttons\r\n   */\r\n  @Input() boundaryLinks: boolean;\r\n  /**\r\n  * Whether to display Previous / Next buttons\r\n  */\r\n  @Input() directionLinks: boolean;\r\n  /**\r\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\r\n   */\r\n  @Input() maxSize: number;\r\n  /**\r\n   * Whether to keep current page in the middle of the visible ones\r\n   */\r\n  @Input() rotate: boolean;\r\n  /**\r\n   * Whether to always display the first and last page numbers.\r\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\r\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\r\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\r\n   * what would be an ellipsis but is replaced by a number because it is sequential\r\n   */\r\n  @Input() boundaryLinkNumbers: boolean;\r\n  /**\r\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\r\n   */\r\n  @Input() forceEllipses: boolean;\r\n  /**\r\n   * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\r\n   */\r\n  @Input() id: string;\r\n\r\n  currentPage: number;\r\n  firstPage = 1;\r\n  lastPage: number;\r\n  pages: Page[] = [];\r\n\r\n  private subscription: Subject<any> = new Subject();\r\n\r\n  /**\r\n   * Emits an event whenever the current page is changed, It emits the current page number\r\n   */\r\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\r\n\r\n  /**\r\n   *\r\n   * @param _angularPaginatorService serivce for angular paginator\r\n   * @param _changeDetectorRef for manual change detection\r\n   */\r\n  constructor(private _angularPaginatorService: AngularPaginatorService,\r\n    private _changeDetectorRef: ChangeDetectorRef) {\r\n\r\n    // subscribe to changes\r\n    this.subscription = this._angularPaginatorService.change.subscribe(id => {\r\n      if (id === this.id) {\r\n        this.updatePages();\r\n        this._changeDetectorRef.markForCheck();\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Navigate to prevoius page\r\n   */\r\n  toPreviousPage(): void {\r\n    if (this.currentPage > this.firstPage) {\r\n      this.setCurrentPage(this.currentPage - 1);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Navigate to next page\r\n   */\r\n  toNextPage(): void {\r\n    if (this.currentPage < this.lastPage) {\r\n      this.setCurrentPage(this.currentPage + 1);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Navigate to first page\r\n   */\r\n  toFirstPage(): void {\r\n    this.setCurrentPage(this.firstPage);\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Navigate to last page\r\n   */\r\n  toLastPage(): void {\r\n    this.setCurrentPage(this.lastPage);\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Sets current page\r\n   *\r\n   * @param page page number to set as currentPage\r\n   */\r\n  setCurrentPage(page: number): void {\r\n    if (page && this.currentPage !== page) {\r\n      this.currentPage = page;\r\n      this.pageChange.emit(page);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * create page object used for template\r\n   *\r\n   * @param number page number\r\n   * @param text page number, text to be displayed\r\n   * @param isActive whether the page is active or not, true for currentPage\r\n   */\r\n  makePage(number: number, text: any, isActive: boolean): any {\r\n    return {\r\n      number: number,\r\n      text: text,\r\n      active: isActive\r\n    };\r\n  }\r\n\r\n  /**\r\n   *  create page array\r\n   *\r\n   * @param currentPage current page number\r\n   * @param itemsPerPage total items per page\r\n   * @param totalItems no of items for pagination, usually array length\r\n   */\r\n  getPages(currentPage: number, itemsPerPage: number, totalItems: number): any {\r\n    const pages: any = [];\r\n\r\n    // Default page limits\r\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\r\n\r\n    let startPage = 1;\r\n    let endPage: number = totalPages;\r\n    const isMaxSized: boolean = this.maxSize && this.maxSize < totalPages;\r\n\r\n    // recompute if maxSize\r\n    if (isMaxSized) {\r\n\r\n      if (this.rotate) {\r\n\r\n        // current page is displayed in the middle of the visible ones\r\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\r\n        endPage = startPage + this.maxSize - 1;\r\n\r\n        // Adjust if limit is exceeded\r\n        if (endPage > totalPages) {\r\n          endPage = totalPages;\r\n          startPage = endPage - this.maxSize + 1;\r\n        }\r\n      } else {\r\n        // Visible pages are paginated with maxSize\r\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\r\n\r\n        // adjust last page if limit is exceeded\r\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\r\n      }\r\n    }\r\n\r\n    // add page number links\r\n    for (let number = startPage; number <= endPage; number++) {\r\n      const page = this.makePage(number, number, number === currentPage);\r\n      pages.push(page);\r\n    }\r\n\r\n    // add links to move between page sets\r\n    if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\r\n      if (startPage > 1) {\r\n\r\n        if (!this.boundaryLinkNumbers || startPage > 3) { // need ellipsis for all options unless range is too close to beginning\r\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\r\n          pages.unshift(previousPageSet);\r\n        }\r\n\r\n        if (this.boundaryLinkNumbers) {\r\n\r\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\r\n            const secondPageLink = this.makePage(2, '2', false);\r\n            pages.unshift(secondPageLink);\r\n          }\r\n\r\n          // add the first page\r\n          const firstPageLink = this.makePage(1, '1', false);\r\n          pages.unshift(firstPageLink);\r\n        }\r\n      }\r\n\r\n      if (endPage < totalPages) {\r\n\r\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) { // need ellipsis for all options unless range is too close to end\r\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\r\n          pages.push(nextPageSet);\r\n        }\r\n\r\n        if (this.boundaryLinkNumbers) {\r\n\r\n          if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential\r\n            const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);\r\n            pages.push(secondToLastPageLink);\r\n          }\r\n\r\n          // add the last page\r\n          const lastPageLink = this.makePage(totalPages, totalPages, false);\r\n          pages.push(lastPageLink);\r\n        }\r\n      }\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  /**\r\n   * Updates the pagination component\r\n   */\r\n  updatePages(): void {\r\n    const instance: AngularPaginatorInstance = this._angularPaginatorService.getInstance(this.id);\r\n\r\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\r\n\r\n    if (correctedCurrentPage !== instance['currentPage'] || this.currentPage !== instance['currentPage']) {\r\n      this.setCurrentPage(correctedCurrentPage);\r\n    }\r\n\r\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Check if currentPage is out of bound with totalPages\r\n   *\r\n   * @param instance instance for which the range is to be corrected\r\n   */\r\n  outOfBoundCorrection(instance: AngularPaginatorInstance): number {\r\n\r\n    const totalPages = Math.ceil(instance['totalItems'] / instance['itemsPerPage']);\r\n\r\n    if (totalPages < instance['currentPage'] && 0 < totalPages) {\r\n      return totalPages;\r\n    } else if (instance['currentPage'] < 1) {\r\n      return 1;\r\n    }\r\n\r\n    return instance['currentPage'];\r\n  }\r\n\r\n  /**\r\n   * check if there is any instance registered with the id\r\n   */\r\n  isValidId(): void {\r\n\r\n    if (!this._angularPaginatorService.getInstance(this.id)) {\r\n      throw new Error('There is no instance registered with id `' + this.id + '`');\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isValidId();\r\n    this.updatePages();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    /** destroy the subscription when the directive is destroyed */\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n}\r\n",
    "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AngularPaginatorComponent } from './angular-paginator.component';\r\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\r\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\r\nimport { AngularPaginatorService } from './services/angular-paginator.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [AngularPaginatorService],\r\n  declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],\r\n  exports: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective]\r\n})\r\n\r\nexport class AngularPaginatorModule { }\r\n"
  ],
  "names": [
    "AngularPaginatorService",
    "this",
    "id",
    "instances",
    "change",
    "EventEmitter",
    "prototype",
    "registerInstance",
    "instance",
    "updateInstance",
    "emit",
    "key",
    "getInstance",
    "getCurrentPage",
    "currentPage",
    "type",
    "Injectable",
    "AngularPaginatorComponent",
    "_angularPaginatorService",
    "boundaryLinks",
    "directionLinks",
    "maxSize",
    "rotate",
    "boundaryLinkNumbers",
    "forceEllipses",
    "firstText",
    "previousText",
    "nextText",
    "lastText",
    "screenReaderFirstText",
    "screenReaderPreviousText",
    "screenReaderNextText",
    "screenReaderLastText",
    "screenReaderPageText",
    "screenReaderCurrentPageText",
    "screenReaderPaginationLabel",
    "autoHide",
    "disabled",
    "pageChange",
    "ngOnInit",
    "className",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "Input",
    "Output",
    "AngularPaginatorPipe",
    "transform",
    "array",
    "createInstance",
    "start",
    "itemsPerPage",
    "end",
    "slice",
    "totalItems",
    "Pipe",
    "name",
    "AngularPaginatorDirective",
    "_changeDetectorRef",
    "_this",
    "firstPage",
    "pages",
    "subscription",
    "Subject",
    "subscribe",
    "updatePages",
    "markForCheck",
    "toPreviousPage",
    "setCurrentPage",
    "toNextPage",
    "lastPage",
    "toFirstPage",
    "toLastPage",
    "page",
    "makePage",
    "number",
    "text",
    "isActive",
    "active",
    "getPages",
    "totalPages",
    "Math",
    "ceil",
    "startPage",
    "endPage",
    "isMaxSized",
    "max",
    "floor",
    "min",
    "push",
    "previousPageSet",
    "unshift",
    "secondPageLink",
    "firstPageLink",
    "nextPageSet",
    "secondToLastPageLink",
    "lastPageLink",
    "correctedCurrentPage",
    "outOfBoundCorrection",
    "isValidId",
    "Error",
    "ngOnDestroy",
    "unsubscribe",
    "Directive",
    "exportAs",
    "ChangeDetectorRef",
    "AngularPaginatorModule",
    "NgModule",
    "imports",
    "CommonModule",
    "providers",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
