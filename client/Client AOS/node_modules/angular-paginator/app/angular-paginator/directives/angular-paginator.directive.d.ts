import { OnInit, OnDestroy, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
import { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';
/**
 * This is the directive where the actual pagination takes place, it provides a sync between the
 * pipes and the pagination component
 */
export declare class AngularPaginatorDirective implements OnInit, OnDestroy {
    private _angularPaginatorService;
    private _changeDetectorRef;
    /**
     * Whether to display First / Last buttons
     */
    boundaryLinks: boolean;
    /**
    * Whether to display Previous / Next buttons
    */
    directionLinks: boolean;
    /**
     * Limit number for pagination size, i.e., the maximum page numbers to be displayed
     */
    maxSize: number;
    /**
     * Whether to keep current page in the middle of the visible ones
     */
    rotate: boolean;
    /**
     * Whether to always display the first and last page numbers.
     * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
     * in-between as necessary. NOTE: max-size refers to the center of the range.
     * This option may add up to 2 more numbers on each side of the displayed range for the end value and
     * what would be an ellipsis but is replaced by a number because it is sequential
     */
    boundaryLinkNumbers: boolean;
    /**
     * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
     */
    forceEllipses: boolean;
    /**
     * Use unique id when multiple paginations are being used on the same page. By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`
     */
    id: string;
    currentPage: number;
    firstPage: number;
    lastPage: number;
    pages: Page[];
    private subscription;
    /**
     * Emits an event whenever the current page is changed, It emits the current page number
     */
    pageChange: EventEmitter<number>;
    /**
     *
     * @param _angularPaginatorService serivce for angular paginator
     * @param _changeDetectorRef for manual change detection
     */
    constructor(_angularPaginatorService: AngularPaginatorService, _changeDetectorRef: ChangeDetectorRef);
    /**
     * Navigate to prevoius page
     */
    toPreviousPage(): void;
    /**
     * Navigate to next page
     */
    toNextPage(): void;
    /**
     * Navigate to first page
     */
    toFirstPage(): void;
    /**
     * Navigate to last page
     */
    toLastPage(): void;
    /**
     * Sets current page
     *
     * @param page page number to set as currentPage
     */
    setCurrentPage(page: number): void;
    /**
     * create page object used for template
     *
     * @param number page number
     * @param text page number, text to be displayed
     * @param isActive whether the page is active or not, true for currentPage
     */
    makePage(number: number, text: any, isActive: boolean): any;
    /**
     *  create page array
     *
     * @param currentPage current page number
     * @param itemsPerPage total items per page
     * @param totalItems no of items for pagination, usually array length
     */
    getPages(currentPage: number, itemsPerPage: number, totalItems: number): any;
    /**
     * Updates the pagination component
     */
    updatePages(): void;
    /**
     * Check if currentPage is out of bound with totalPages
     *
     * @param instance instance for which the range is to be corrected
     */
    outOfBoundCorrection(instance: AngularPaginatorInstance): number;
    /**
     * check if there is any instance registered with the id
     */
    isValidId(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
}
